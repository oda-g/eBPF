==========
命令セット
==========

命令の形式
----------

1命令は、64bitで、以下の形式。

::

      <------------ 32 ----------------><----- 16 ------> 4    4   <-- 8 -->
      +--------------------------------+----------------+----+----+--------+
  msb | immediate                      | offset         |src |dst | opcode | lsb
      +--------------------------------+----------------+----+----+--------+


opcodeの部分は、下位3ビットが命令クラスを示す。命令クラスは、大きく分類して、以下の3種類がある。

* ロード、ストア
* 算術論理演算
* ジャンプ

opcodeの残り5ビットは、上記大分類によって、異なる。以下に大分類ごとに命令形式を示す。
(マクロは、include/uapi/linux/bpf.h、include/uapi/linux/bpf_common.h に定義されているもの。)

ロード、ストア
~~~~~~~~~~~~~~
::

       opecode
        3   2     3
     +----+----+-----+
     |mode|size|class|
     +----+----+-----+
       |    |     |
       |    |     +---> 000  BPF_LD   0x00
       |    |           001  BPF_LDX  0x01
       |    |           010  BPF_ST   0x02
       |    |           011  BPF_STX  0x03
       |    |
       |    +---> 00  BPF_W   0x00
       |          01  BPF_H   0x08
       |          10  BPF_B   0x10
       |          11  BPF_DW  0x18
       |
       +---> 000  BPF_IMM   0x00
             001  BPF_ABS   0x20
             010  BPF_IND   0x40
             011  BPF_MEM   0x60
             100  BPF_LEN   0x80  (reserved)
             101  BPF_MSH   0xa0  (reserved)
             110  BPF_XADD  0xc0

算術論理演算
~~~~~~~~~~~~
::

       opcode
        4     1   3
     +-----+---+-----+
     | op  |src|class|
     +-----+---+-----+
       |     |    |
       |     |    +---> 100  BPF_ALU   0x04   32bit演算
       |     |          111  BPF_ALU64 0x07   64bit演算
       |     |
       |     +---> 0  BPF_K  0x00  immediate
       |           1  BPF_X  0x08  register
       |
       +---> 0000  BPF_ADD   0x00
             0001  BPF_SUB   0x10
             0010  BPF_MUL   0x20
             0011  BPF_DIV   0x30
             0100  BPF_OR    0x40
             0101  BPF_AND   0x50
             0110  BPF_LSH   0x60
             0111  BPF_RSH   0x70
             1000  BPF_NEG   0x80
             1001  BPF_MOD   0x90
             1010  BPF_XOR   0xa0
             1011  BPF_MOV   0xb0
             1100  BPF_ARSH  0xc0
             1101  BPF_END   0xd0

ジャンプ
~~~~~~~~
::

       opcode
        4     1   3
     +-----+---+-----+
     | op  |src|class|
     +-----+---+-----+
       |     |    |
       |     |    +---> 101  BPF_JMP   0x05
       |     |
       |     +---> 0  BPF_K  0x00  immediate
       |           1  BPF_X  0x08  register
       |
       +---> 0000  BPF_JA    0x00
             0001  BPF_JEQ   0x10
             0010  BPF_JGT   0x20
             0011  BPF_JGE   0x30
             0100  BPF_JSET  0x40
             0101  BPF_JNE   0x50
             0110  BPF_JSGT  0x60
             0111  BPF_JSGE  0x70
             1000  BPF_CALL  0x80
             1001  BPF_EXIT  0x90
             1010  BPF_JLT   0xa0
             1011  BPF_JLE   0xb0
             1100  BPF_JSLT  0xc0
             1101  BPF_JSLE  0xd0


命令表
------

補足:

* opは16進
* macroは、opをマクロで示したもの。表では、「|」を省略している。(ex. 0x07 == BPF_ALU64 | BPF_ADD | BPF_K)
* rdは、dst register、rsは、src register

64bit演算
~~~~~~~~~

+----+--------------------------+---------------+
| op | macro                    | assemble code |
+====+==========================+===============+
| 07 | BPF_ALU64 BPF_ADD BPF_K  | rd += imm     |
+----+--------------------------+---------------+
| 0f | BPF_ALU64 BPF_ADD BPF_X  | rd += rs      |
+----+--------------------------+---------------+
| 17 | BPF_ALU64 BPF_SUB BPF_K  | rd -= imm     |
+----+--------------------------+---------------+
| 1f | BPF_ALU64 BPF_SUB BPF_X  | rd -= rs      |
+----+--------------------------+---------------+
| 27 | BPF_ALU64 BPF_MUL BPF_K  | rd *= imm     |
+----+--------------------------+---------------+
| 2f | BPF_ALU64 BPF_MUL BPF_X  | rd *= rs      |
+----+--------------------------+---------------+
| 37 | BPF_ALU64 BPF_DIV BPF_K  | rd /= imm     |
+----+--------------------------+---------------+
| 3f | BPF_ALU64 BPF_DIV BPF_X  | rd /= rs      |
+----+--------------------------+---------------+
| 47 | BPF_ALU64 BPF_OR  BPF_K  | rd |= imm     |
+----+--------------------------+---------------+
| 4f | BPF_ALU64 BPF_OR  BPF_X  | rd |= rs      |
+----+--------------------------+---------------+
| 57 | BPF_ALU64 BPF_AND BPF_K  | rd &= imm     |
+----+--------------------------+---------------+
| 5f | BPF_ALU64 BPF_AND BPF_X  | rd &= rs      |
+----+--------------------------+---------------+
| 67 | BPF_ALU64 BPF_LSH BPF_K  | rd <<= imm    |
+----+--------------------------+---------------+
| 6f | BPF_ALU64 BPF_LSH BPF_X  | rd <<= rs     |
+----+--------------------------+---------------+
| 77 | BPF_ALU64 BPF_RSH BPF_K  | rd >>= imm    |
+----+--------------------------+---------------+
| 7f | BPF_ALU64 BPF_RSH BPF_X  | rd >>= rs     |
+----+--------------------------+---------------+
| 87 | BPF_ALU64 BPF_NEG        | rd = -rd      |
+----+--------------------------+---------------+
| 97 | BPF_ALU64 BPF_MOD BPF_K  | rd %= imm     |
+----+--------------------------+---------------+
| 9f | BPF_ALU64 BPF_MOD BPF_X  | rd %= rs      |
+----+--------------------------+---------------+
| a7 | BPF_ALU64 BPF_XOR BPF_K  | rd ^= imm     |
+----+--------------------------+---------------+
| af | BPF_ALU64 BPF_XOR BPF_X  | rd ^= rs      |
+----+--------------------------+---------------+
| b7 | BPF_ALU64 BPF_MOV BPF_K  | rd = imm      |
+----+--------------------------+---------------+
| bf | BPF_ALU64 BPF_MOV BPF_X  | rd = rs       |
+----+--------------------------+---------------+
| c7 | BPF_ALU64 BPF_ARSH BPF_K | rd s>>= imm   |
+----+--------------------------+---------------+
| cf | BPF_ALU64 BPF_ARSH BPF_X | rd s>>= rs    |
+----+--------------------------+---------------+

32bit演算
~~~~~~~~~

+----+-----------------------+-------------------------+
| op | macro                 | assemble code           |
+====+=======================+=========================+
| 04 | BPF_ALU BPF_ADD BPF_K | (u32) rd += (u32) imm   |
+----+-----------------------+-------------------------+
| 0c | BPF_ALU BPF_ADD BPF_X | (u32) rd += (u32) rs    |
+----+-----------------------+-------------------------+
| 14 | BPF_ALU BPF_SUB BPF_K | (u32) rd -= (u32) imm   |
+----+-----------------------+-------------------------+
| 1c | BPF_ALU BPF_SUB BPF_X | (u32) rd -= (u32) rs    |
+----+-----------------------+-------------------------+
| 24 | BPF_ALU BPF_MUL BPF_K | (u32) rd *= (u32) imm   |
+----+-----------------------+-------------------------+
| 2c | BPF_ALU BPF_MUL BPF_X | (u32) rd *= (u32) rs    |
+----+-----------------------+-------------------------+
| 34 | BPF_ALU BPF_DIV BPF_K | (u32) rd /= (u32) imm   |
+----+-----------------------+-------------------------+
| 3c | BPF_ALU BPF_DIV BPF_X | (u32) rd /= (u32) rs    |
+----+-----------------------+-------------------------+
| 44 | BPF_ALU BPF_OR  BPF_K | (u32) rd |= (u32) imm   |
+----+-----------------------+-------------------------+
| 4c | BPF_ALU BPF_OR  BPF_X | (u32) rd |= (u32) rs    |
+----+-----------------------+-------------------------+
| 54 | BPF_ALU BPF_AND BPF_K | (u32) rd &= (u32) imm   |
+----+-----------------------+-------------------------+
| 5c | BPF_ALU BPF_AND BPF_X | (u32) rd &= (u32) rs    |
+----+-----------------------+-------------------------+
| 64 | BPF_ALU BPF_LSH BPF_K | (u32) rd <<= (u32) imm  |
+----+-----------------------+-------------------------+
| 6c | BPF_ALU BPF_LSH BPF_X | (u32) rd <<= (u32) rs   |
+----+-----------------------+-------------------------+
| 74 | BPF_ALU BPF_RSH BPF_K | (u32) rd >>= (u32) imm  |
+----+-----------------------+-------------------------+
| 7c | BPF_ALU BPF_RSH BPF_X | (u32) rd >>= (u32) rs   |
+----+-----------------------+-------------------------+
| 84 | BPF_ALU BPF_NEG       | rd = (u32) -rd          |
+----+-----------------------+-------------------------+
| 94 | BPF_ALU BPF_MOD BPF_K | (u32) rd %= (u32) imm   |
+----+-----------------------+-------------------------+
| 9c | BPF_ALU BPF_MOD BPF_X | (u32) rd %= (u32) rs    |
+----+-----------------------+-------------------------+
| a4 | BPF_ALU BPF_XOR BPF_K | (u32) rd ^= (u32) imm   |
+----+-----------------------+-------------------------+
| ac | BPF_ALU BPF_XOR BPF_X | (u32) rd ^= (u32) rs    |
+----+-----------------------+-------------------------+
| b4 | BPF_ALU BPF_MOV BPF_K | (u32) rd = (u32) imm    |
+----+-----------------------+-------------------------+
| bc | BPF_ALU BPF_MOV BPF_X | (u32) rd = (u32) rs     |
+----+-----------------------+-------------------------+

* 32bit演算では、算術シフト(0xc4、0xcc)は、サポートされていない。

エンディアン変換
~~~~~~~~~~~~~~~~

* opの部分は、32bit演算のものであるが、imm の値が意味を持つ、特殊な形式。
* leXXは、hostのバイト形式をリトルエンディアンに変換。x86_64の場合は、そのまま。
* beXXは、hostのバイト形式をビッグエンディアンに変換。x86_64の場合は、バイトスワップされる。
* 指定したサイズを超えた分は、0になるので注意。(leXXの場合も。ex. le16(0x771234) = 0x1234, be16(0x771234) = 0x3412)

+----+----+---------------------------+---------------+
| op |imm |  macro                    | assemble code |
+====+====+===========================+===============+
| d4 | 16 | BPF_ALU BPF_END BPF_TO_LE | rd = le16 rd  |
+----+----+---------------------------+---------------+
| d4 | 32 | BPF_ALU BPF_END BPF_TO_LE | rd = le32 rd  |
+----+----+---------------------------+---------------+
| d4 | 64 | BPF_ALU BPF_END BPF_TO_LE | rd = le64 rd  |
+----+----+---------------------------+---------------+
| dc | 16 | BPF_ALU BPF_END BPF_TO_BE | rd = be16 rd  |
+----+----+---------------------------+---------------+
| dc | 32 | BPF_ALU BPF_END BPF_TO_BE | rd = be32 rd  |
+----+----+---------------------------+---------------+
| dc | 64 | BPF_ALU BPF_END BPF_TO_BE | rd = be64 rd  |
+----+----+---------------------------+---------------+

* BPF_ALU64 | BPF_END の組み合わせは、存在しない。

ジャンプ
~~~~~~~~

* offは、負数は、NG。(なので、loopはできない)
* pc は、今実行中の次の命令を指していることに注意。(off は、0でもOKであるが、その場合、if文の意味はない。)

+----+------------------------+-----------------------------+
| op | macro                  | assemble code               |
+====+========================+=============================+
| 05 | BPF_JMP BPF_JA         | goto pc + off               |
+----+------------------------+-----------------------------+
| 15 | BPF_JMP BPF_JEQ  BPF_K | if rd == imm goto pc + off  |
+----+------------------------+-----------------------------+
| 1d | BPF_JMP BPF_JEQ  BPF_X | if rd == rs  goto pc + off  |
+----+------------------------+-----------------------------+
| 25 | BPF_JMP BPF_JGT  BPF_K | if rd > imm  goto pc + off  |
+----+------------------------+-----------------------------+
| 2d | BPF_JMP BPF_JGT  BPF_X | if rd > rs   goto pc + off  |
+----+------------------------+-----------------------------+
| 35 | BPF_JMP BPF_JGE  BPF_K | if rd >= imm goto pc + off  |
+----+------------------------+-----------------------------+
| 3d | BPF_JMP BPF_JGE  BPF_X | if rd >= rs  goto pc + off  |
+----+------------------------+-----------------------------+
| 45 | BPF_JMP BPF_JSET BPF_K | if rd & imm  goto pc + off  |
+----+------------------------+-----------------------------+
| 4d | BPF_JMP BPF_JSET BPF_X | if rd & rs   goto pc + off  |
+----+------------------------+-----------------------------+
| 55 | BPF_JMP BPF_JNE  BPF_K | if rd != imm goto pc + off  |
+----+------------------------+-----------------------------+
| 5d | BPF_JMP BPF_JNE  BPF_X | if rd != rs  goto pc + off  |
+----+------------------------+-----------------------------+
| 65 | BPF_JMP BPF_JSGT BPF_K | if rd s> imm  goto pc + off |
+----+------------------------+-----------------------------+
| 6d | BPF_JMP BPF_JSGT BPF_X | if rd s> rs   goto pc + off |
+----+------------------------+-----------------------------+
| 75 | BPF_JMP BPF_JSGE BPF_K | if rd s>= imm goto pc + off |
+----+------------------------+-----------------------------+
| 7d | BPF_JMP BPF_JSGE BPF_X | if rd s>= rs  goto pc + off |
+----+------------------------+-----------------------------+
| 85 | BPF_JMP BPF_CALL       | call imm                    |
+----+------------------------+-----------------------------+
| 95 | BPF_JMP BPF_EXIT       | exit                        |
+----+------------------------+-----------------------------+
| a5 | BPF_JMP BPF_JLT  BPF_K | if rd < imm  goto pc + off  |
+----+------------------------+-----------------------------+
| ad | BPF_JMP BPF_JLT  BPF_X | if rd < rs   goto pc + off  |
+----+------------------------+-----------------------------+
| b5 | BPF_JMP BPF_JLE  BPF_K | if rd <= imm goto pc + off  |
+----+------------------------+-----------------------------+
| bd | BPF_JMP BPF_JLE  BPF_X | if rd <= rs  goto pc + off  |
+----+------------------------+-----------------------------+
| c5 | BPF_JMP BPF_JSLT BPF_K | if rd s< imm  goto pc + off |
+----+------------------------+-----------------------------+
| cd | BPF_JMP BPF_JSLT BPF_X | if rd s< rs   goto pc + off |
+----+------------------------+-----------------------------+
| d5 | BPF_JMP BPF_JSLE BPF_K | if rd s<= imm goto pc + off |
+----+------------------------+-----------------------------+
| dd | BPF_JMP BPF_JSLE BPF_X | if rd s<= rs  goto pc + off |
+----+------------------------+-----------------------------+
| f5 | BPF_JMP BPF_TAIL_CALL  | tail_call imm               |
+----+------------------------+-----------------------------+

ロード、ストア
~~~~~~~~~~~~~~

+----+-------------------------+-------------------------------+-----+
| op | macro                   | assemble code                 |note |
+====+=========================+===============================+=====+
| 18 | BPF_IMM BPF_DW BPF_LD   | rd = imm                      | 1   |
+----+-------------------------+-------------------------------+-----+
| 20 | BPF_ABS BPF_W  BPF_LD   | r0 = *(u32 *)skb[imm]         | 2   |
+----+-------------------------+-------------------------------+-----+
| 28 | BPF_ABS BPF_H  BPF_LD   | r0 = *(u16 *)skb[imm]         | 2   |
+----+-------------------------+-------------------------------+-----+
| 30 | BPF_ABS BPF_B  BPF_LD   | r0 = *(u8 *)skb[imm]          | 2   |
+----+-------------------------+-------------------------------+-----+
| 40 | BPF_IND BPF_W  BPF_LD   | r0 = *(u32 *)skb[rs + imm]    | 2   |
+----+-------------------------+-------------------------------+-----+
| 48 | BPF_IND BPF_H  BPF_LD   | r0 = *(u16 *)skb[rs + imm]    | 2   |
+----+-------------------------+-------------------------------+-----+
| 50 | BPF_IND BPF_B  BPF_LD   | r0 = *(u8 *)skb[rs + imm]     | 2   |
+----+-------------------------+-------------------------------+-----+
| 61 | BPF_MEM BPF_W  BPF_LDX  | rd = *(u32 *)(rs + off)       |     |
+----+-------------------------+-------------------------------+-----+
| 69 | BPF_MEM BPF_H  BPF_LDX  | rd = *(u16 *)(rs + off)       |     |
+----+-------------------------+-------------------------------+-----+
| 71 | BPF_MEM BPF_B  BPF_LDX  | rd = *(u8 *)(rs + off)        |     |
+----+-------------------------+-------------------------------+-----+
| 79 | BPF_MEM BPF_DW BPF_LDX  | rd = *(u64 *)(rs + off)       |     |
+----+-------------------------+-------------------------------+-----+
| 62 | BPF_MEM BPF_W  BPF_ST   | *(u32 *)(rd + off) = imm      |     |
+----+-------------------------+-------------------------------+-----+
| 6a | BPF_MEM BPF_H  BPF_ST   | *(u16 *)(rd + off) = imm      |     |
+----+-------------------------+-------------------------------+-----+
| 72 | BPF_MEM BPF_B  BPF_ST   | *(u8 *)(rd + off) = imm       |     |
+----+-------------------------+-------------------------------+-----+
| 7a | BPF_MEM BPF_DW BPF_ST   | *(u64 *)(rd + off) = imm      |     |
+----+-------------------------+-------------------------------+-----+
| 63 | BPF_MEM BPF_W  BPF_STX  | *(u32 *)(rd + off) = rs       |     |
+----+-------------------------+-------------------------------+-----+
| 6b | BPF_MEM BPF_H  BPF_STX  | *(u16 *)(rd + off) = rs       |     |
+----+-------------------------+-------------------------------+-----+
| 73 | BPF_MEM BPF_B  BPF_STX  | *(u8 *)(rd + off) = rs        |     |
+----+-------------------------+-------------------------------+-----+
| 7b | BPF_MEM BPF_DW BPF_STX  | *(u64 *)(rd + off) = rs       |     |
+----+-------------------------+-------------------------------+-----+
| c3 | BPF_XADD BPF_W  BPF_STX | lock *(u32 *)(rd + off) += rs |     |
+----+-------------------------+-------------------------------+-----+
| db | BPF_XADD BPF_DW BPF_STX | lock *(u64 *)(rd + off) += rs |     |
+----+-------------------------+-------------------------------+-----+

* skb命令に64bit長のものはサポートされていない。(38: BPF_ABS BPF_DW BPF_LD、58: BPF_IND BPF_DW BPF_LD)
* atomic add命令に8bit、16bir長のものはサポートされていない。(cb: BPF_XADD BPF_H BPF_STX、d3: BPF_XADD BPF_B BPF_STX)

|
| 1:
| 命令を2個分使う。(この命令だけ、128bit長であるという言い方もできる。)
| 2個目の命令は、imm以外は、0でなければならない。immのサイズは32bitなので、64bitの即値のためには、2つ必要だということ。
| rd = imm(2個目)<<32 + imm(1個目) である。(x86_64の場合)

|
| 2:
| skbのパケットデータにアクセスするための特殊な命令である。
| struct sk_buff を取り扱う(i.e. そのポインタが第一引数の)プログラムタイプしか使用できない。
| r0とr6を固定で使用する。r0は結果の格納に使用。r6は、struct sk_buff へのポインタを格納していなければならない。
| (したがって、典型的には、本命令の実行前に「r6 = r1」を行うことになる。r1は、プログラムへの第一引数、すなわち、sk_buffへのポインタである。)
| assemble code の skb[imm]、skb[rs+imm]の部分は、詳細に書くと以下のとおりである。
* (((struct sk_buff *)r6)->data + imm)
* (((struct sk_buff *)r6)->data + rs + imm)

| 本命令は、バイトコードを直接プログラムする場合に使用するものであると考えられる。
| C言語で書く場合は、skb_load_bytes ヘルパー関数を使用することになるであろう。
|

